version: "3.2"
services:
  # spc-api-server:
  #   build: .
  #   container_name: spc_api_container
  #   depends_on:
  #     - spc-redis
  #     - spc-db
  #   environment:
  #     API_PORT: ${API_PORT}
  #     SESSION_SECRET: ${SESSION_SECRET}
  #     DATABASE_URL: ${DATABASE_URL}
  #   ports:
  #     - "${API_PORT}:${API_PORT}"

  spc-redis:
    image: ${REDIS_IMAGE_NAME}
    container_name: ${REDIS_CONTAINER_NAME}
    environment:
      REDIS_PASS: ${REDIS_PASSWORD}
      REDIS_CMD_OPTS: "--appendonly yes"
    volumes:
      - ${REDIS_DB_PATH}:/data:rw
      # - ${REDIS_PATH_TO_CERTS}:/certs:rw
    ports:
      - "0.0.0.0:${REDIS_EXTERIOR_PORT}:${REDIS_INTERIOR_PORT}"
    restart: on-failure

  spc-db:
    container_name: ${DB_CONTAINER_NAME}
    command: -c ssl=off
    image: ${POSTGRES_IMAGE}
    environment:
      ALLOW_IP_RANGE: 0.0.0.0/0
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DBNAME: ${POSTGRES_DBNAME}
      POSTGRES_DB: ${POSTGRES_DBNAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
      # POSTGRES_MULTIPLE_EXTENSIONS: postgis,hstore,postgis_topology,postgis_raster,pgrouting
    volumes:
      - ./dev/db/local:/var/lib/postgresql/12/main
      # - ./db/postgres/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    ports:
      - "0.0.0.0:${DB_EXTERIOR_PORT}:${POSTGRES_PORT}"
    restart: on-failure
    healthcheck:
      test: "exit 0"
# networks:
#   default:
#     external:
#       name: ${NETWORK}
